// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: api/tern.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MigrationServiceClient is the client API for MigrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MigrationServiceClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//rpc GetVersion(??) returns (google.protobuf.Empty){}
	ConnectAndUpdate(ctx context.Context, in *ConnectAndUpdateRequest, opts ...grpc.CallOption) (*VersionMessage, error)
	ForceVersion(ctx context.Context, in *VersionMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type migrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrationServiceClient(cc grpc.ClientConnInterface) MigrationServiceClient {
	return &migrationServiceClient{cc}
}

func (c *migrationServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tern.MigrationService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) ConnectAndUpdate(ctx context.Context, in *ConnectAndUpdateRequest, opts ...grpc.CallOption) (*VersionMessage, error) {
	out := new(VersionMessage)
	err := c.cc.Invoke(ctx, "/tern.MigrationService/ConnectAndUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) ForceVersion(ctx context.Context, in *VersionMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tern.MigrationService/ForceVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationServiceServer is the server API for MigrationService service.
// All implementations must embed UnimplementedMigrationServiceServer
// for forward compatibility
type MigrationServiceServer interface {
	Connect(context.Context, *ConnectRequest) (*emptypb.Empty, error)
	//rpc GetVersion(??) returns (google.protobuf.Empty){}
	ConnectAndUpdate(context.Context, *ConnectAndUpdateRequest) (*VersionMessage, error)
	ForceVersion(context.Context, *VersionMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedMigrationServiceServer()
}

// UnimplementedMigrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMigrationServiceServer struct {
}

func (UnimplementedMigrationServiceServer) Connect(context.Context, *ConnectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedMigrationServiceServer) ConnectAndUpdate(context.Context, *ConnectAndUpdateRequest) (*VersionMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectAndUpdate not implemented")
}
func (UnimplementedMigrationServiceServer) ForceVersion(context.Context, *VersionMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceVersion not implemented")
}
func (UnimplementedMigrationServiceServer) mustEmbedUnimplementedMigrationServiceServer() {}

// UnsafeMigrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrationServiceServer will
// result in compilation errors.
type UnsafeMigrationServiceServer interface {
	mustEmbedUnimplementedMigrationServiceServer()
}

func RegisterMigrationServiceServer(s grpc.ServiceRegistrar, srv MigrationServiceServer) {
	s.RegisterService(&MigrationService_ServiceDesc, srv)
}

func _MigrationService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tern.MigrationService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_ConnectAndUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAndUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).ConnectAndUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tern.MigrationService/ConnectAndUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).ConnectAndUpdate(ctx, req.(*ConnectAndUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_ForceVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).ForceVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tern.MigrationService/ForceVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).ForceVersion(ctx, req.(*VersionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MigrationService_ServiceDesc is the grpc.ServiceDesc for MigrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MigrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tern.MigrationService",
	HandlerType: (*MigrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _MigrationService_Connect_Handler,
		},
		{
			MethodName: "ConnectAndUpdate",
			Handler:    _MigrationService_ConnectAndUpdate_Handler,
		},
		{
			MethodName: "ForceVersion",
			Handler:    _MigrationService_ForceVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tern.proto",
}
